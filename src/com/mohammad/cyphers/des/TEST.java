package com.mohammad.cyphers.des;

import java.io.IOException;

public class TEST {

	public static void main(String[] args) {

//		Tools tools = new Tools();
//		System.out.println(tools.Xor("000110110000001011101111111111000111000001110010", tools.Exp_Permutation("11110000101010101111000010101010")));
//		System.out.println(tools.SubstitutionChoise_S_Box("011000010001011110111010100001100110010100100111"));
//		
//		Tools tool = new Tools();
//		String binary = tool.ascii2binary(' '), hex = tool.binary2hex(binary);
//		System.out.println(binary + "\n"+hex);

		StringBuilder input = new StringBuilder(),
				bin_out=new StringBuilder(),
				hex_out=new StringBuilder(),
				ascii=new StringBuilder();
		
		input.append("I gave a cry of astonishment. I saw and thought nothing of the other four Martian monsters; my attention was riveted upon the nearer incident. Simultaneously two other shells burst in the air near the body as the hood twisted round in time to receive, but not in time to dodge, the fourth shell.");
		//tool.TextConversion(input, bin_out, hex_out, ascii);
		//System.out.println(input.toString()+"\n\n"+bin_out.toString()+"\n\n"+hex_out.toString()+"\n\n"+ascii.toString()+"\n\n");
		String KEY = "0001001100110100010101110111100110011011101111001101111111110001";
		DES_Engine des_ = new DES_Engine(KEY);
		try {
			StringBuilder cypherText = des_.Encrypt(input,"CIPHERTEXT_REP.txt","PLAINTEXT_REP.txt");
			StringBuilder plain= des_.Decrypt(cypherText, "DECRYPT_OUT_REP.txt", "CIPHERTEXT_REPRESENTATION.txt");
			System.out.println(input+"\n\n\n"+cypherText.toString()+"\n\n\n"+plain.toString());
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		
//		KeyGenerator kg = new KeyGenerator();
//		kg.setKey("0001001100110100010101110111100110011011101111001101111111110001");
//		System.out.println(kg.getKey());
//		kg.generate();
//		kg.display_allKeys();
//		
//		DES_Core des = new DES_Core("0001001100110100010101110111100110011011101111001101111111110001");
//		String cypherTxt =	des.Encrypt("0010000100100011010001010110011110001001101010111100110111101111");
//	
//		String plainTxt = des.Decrypt(cypherTxt);
//		
//		System.out.println("TEXT\n0010000100100011010001010110011110001001101010111100110111101111"
//				+"\n\nCYPHER_TXT\n"+cypherTxt+"\n\nDECRYPT\n"+plainTxt);
//	
		//System.out.println(tool.apply_P("01011100100000101011010110010111"));
		
		//System.out.println("\n\n"+tool.SubstitutionChoise_S_Box("011000010001011110111010100001100110010100100111"));
	}

}


/*
 
/////////64-bit key//////////////////////////////
00010011 00110100 01010111 01111001 10011011 10111100 11011111 11110001

////////56-bit  key after PC-1
11110000 11001100 10101010 11110101 0101011 001100111 10001111

///48-bit sub-keys result from program
000110 110000 001011 101111 111111 000111 000001 110010
011110 011010 111011 011001 110110 111100 100111 100101
010101 011111 110010 001010 010000 101100 111110 011001
011100 101010 110111 010110 110110 110011 010100 011101
011111 001110 110000 000111 111010 110101 001110 101000
011000 111010 010100 111110 010100 000111 101100 101111
111011 001000 010010 110111 111101 100001 100010 111100
111101 111000 101000 111010 110000 010011 101111 111011
111000 001101 101111 101011 111011 011110 011110 000001
101100 011111 001101 000111 101110 100100 011001 001111
001000 010101 111111 010011 110111 101101 001110 000110
011101 010111 000111 110101 100101 000110 011111 101001
100101 111100 010111 010001 111110 101011 101001 000001
010111 110100 001110 110111 111100 101110 011100 111010
101111 111001 000110 001101 001111 010011 111100 001010
110010 110011 110110 001011 000011 100001 011111 110101

///48-bit sub-keys result on site
000110 110000 001011 101111 111111 000111 000001 110010
011110 011010 111011 011001 110110 111100 100111 100101
010101 011111 110010 001010 010000 101100 111110 011001
011100 101010 110111 010110 110110 110011 010100 011101
011111 001110 110000 000111 111010 110101 001110 101000
011000 111010 010100 111110 010100 000111 101100 101111
111011 001000 010010 110111 111101 100001 100010 111100
111101 111000 101000 111010 110000 010011 101111 111011
111000 001101 101111 101011 111011 011110 011110 000001
101100 011111 001101 000111 101110 100100 011001 001111
001000 010101 111111 010011 110111 101101 001110 000110
011101 010111 000111 110101 100101 000110 011111 101001
100101 111100 010111 010001 111110 101011 101001 000001
010111 110100 001110 110111 111100 101110 011100 111010
101111 111001 000110 001101 001111 010011 111100 001010
110010 110011 110110 001011 000011 100001 011111 110101


*/